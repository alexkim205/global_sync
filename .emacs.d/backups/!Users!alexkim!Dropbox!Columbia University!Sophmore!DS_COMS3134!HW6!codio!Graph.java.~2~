import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;

public class Graph {

    // Keep a fast index to nodes in the map
    private Map<Integer, Vertex> vertexNames;

    /**
     * Construct an empty Graph with a map. The map's key is the name of a vertex
     * and the map's value is the vertex object.
     */
    public Graph() {
	vertexNames = new HashMap<>();
    }

    /**
     * Adds a vertex to the graph. Throws IllegalArgumentException if two vertices
     * with the same name are added.
     * 
     * @param v
     *          (Vertex) vertex to be added to the graph
     */
    public void addVertex(Vertex v) {
	if (vertexNames.containsKey(v.name))
	    throw new IllegalArgumentException("Cannot create new vertex with existing name.");
	vertexNames.put(v.name, v);
    }

    /**
     * Gets a collection of all the vertices in the graph
     * 
     * @return (Collection<Vertex>) collection of all the vertices in the graph
     */
    public Collection<Vertex> getVertices() {
	return vertexNames.values();
    }

    /**
     * Gets the vertex object with the given name
     * 
     * @param name
     *          (String) name of the vertex object requested
     * @return (Vertex) vertex object associated with the name
     */
    public Vertex getVertex(String name) {
	return vertexNames.get(name);
    }

    /**
     * Adds a directed edge from vertex u to vertex v
     * 
     * @param nameU
     *          (String) name of vertex u
     * @param nameV
     *          (String) name of vertex v
     * @param cost
     *          (double) cost of the edge between vertex u and v
     */
    public void addEdge(int nameU, int nameV, Double cost) {
	if (!vertexNames.containsKey(nameU))
	    throw new IllegalArgumentException(nameU + " does not exist. Cannot create edge.");
	if (!vertexNames.containsKey(nameV))
	    throw new IllegalArgumentException(nameV + " does not exist. Cannot create edge.");
	Vertex sourceVertex = vertexNames.get(nameU);
	Vertex targetVertex = vertexNames.get(nameV);
	Edge newEdge = new Edge(sourceVertex, targetVertex, cost);
	sourceVertex.addEdge(newEdge);
    }

    /**
     * Adds an undirected edge between vertex u and vertex v by adding a directed
     * edge from u to v, then a directed edge from v to u
     * 
     * @param name
     *          (String) name of vertex u
     * @param name2
     *          (String) name of vertex v
     * @param cost
     *          (double) cost of the edge between vertex u and v
     */
    public void addUndirectedEdge(int name, int name2, double cost) {
	addEdge(name, name2, cost);
	addEdge(name2, name, cost);
    }


    /**
     * Computes the euclidean distance between two points as described by their
     * coordinates
     * 
     * @param ux
     *          (double) x coordinate of point u
     * @param uy
     *          (double) y coordinate of point u
     * @param vx
     *          (double) x coordinate of point v
     * @param vy
     *          (double) y coordinate of point v
     * @return (double) distance between the two points
     */
    public double computeEuclideanDistance(double ux, double uy, double vx, double vy) {
	return Math.sqrt(Math.pow(ux - vx, 2) + Math.pow(uy - vy, 2));
    }

    /**
     * Computes euclidean distance between two vertices as described by their
     * coordinates
     * 
     * @param u
     *          (Vertex) vertex u
     * @param v
     *          (Vertex) vertex v
     * @return (double) distance between two vertices
     */
    public double computeEuclideanDistance(Vertex u, Vertex v) {
	return computeEuclideanDistance(u.x, u.y, v.x, v.y);
    }

    /**
     * Calculates the euclidean distance for all edges in the map using the
     * computeEuclideanCost method.
     */
    public void computeAllEuclideanDistances() {
	for (Vertex u : getVertices())
	    for (Edge uv : u.adjacentEdges) {
		Vertex v = uv.target;
		uv.distance = computeEuclideanDistance(u.x, u.y, v.x, v.y);
	    }
    }



    // STUDENT CODE STARTS HERE

    public void generateRandomVertices(int n) {
	vertexNames = new HashMap<>(); // reset the vertex hashmap

	Random rand = new Random();
    
	for (int i=0;i<n;i++) {
	    addVertex(new Vertex(i, rand.nextInt(100), rand.nextInt(100)));
	}

	for (int j=0;j<n;j++) {
	    for (int k=0;k<n;k++)
		if (j!=k)
		    addEdge(j, k, 10.0);
	}
    
	computeAllEuclideanDistances(); // compute distances
    }

    public List<Edge> nearestNeighborTsp() {
	List<Vertex> visited = new LinkedList<Vertex>();
	List<Edge> ret = new LinkedList<Edge>();
        double shortest = Integer.MAX_VALUE;
	Vertex shortest_v = vertexNames.get(0);
	Vertex current = vertexNames.get(0);
	Edge shortest_e = vertexNames.get(0).adjacentEdges.get(0);
	
	while (!visited.contains(current)) {
	    for (Edge e : current.adjacentEdges) {
		if (!visited.contains(e.target) && (shortest > e.distance)) {
		    shortest_v = e.target;
		    shortest_e = e;
		    shortest = e.distance;
		}	
	    }
	    ret.add(shortest_e);
	    visited.add(current);
	    current = shortest_v;
	    shortest = Integer.MAX_VALUE;
        }
	ret.add(current.adjacentEdges.get(0));
	return ret;
    }

    public List<Edge> bruteForceTsp() {
	List<List<Integer>> ret = new LinkedList<LinkedList<Integer>>();
	List<Integer> original = new LinkedList<Integer>();
	List<List<Edge>> ret2 = new LinkedList<LinkedList<Edge>>();

	for (int i=0;i<vertexNames.size();i++) {
	    original.add(i);
	}
	permute(0, original, ret);

	for (List<Integer> l : ret) {
	    for (int j=0;j<(l.size()-1);j++) {
		for (Edge e : vertexNames.get(l.get(j)).adjacentEdges) {
		    if (e.target.name == l.get(j+1)) {
			ret2.get(j).add(e);
		    }
		}
	    }
	    // add last return to home path
	    for (Edge e: vertexNames.get(l.get(l.size()-1)).adjacentEdges) {
		if (e.target.name == l.get(0)) {
		    ret2.get(j).add(e);	    
		}
	    }
	}

	int shortest_dis = Integer.MAX_VALUE;
	List<Edge> ret3 = ret2.get(0);
	for (List<Edge> l : ret2) {
	    int tot_dis = 0;
	    for (Edge e : l) {
		tot_dis += e.distance;
	    }
	    if (tot_dis < shortest_dis) {
		shortest_dis = tot_dis;
	        ret3 = l;
	    }
	}
	return ret3;
	
	// calculate trip distances
    }

    private static void permute(int start, List<Integer> in, List<List<Integer>> master) {
	
	if (start == in.size()) {
	    master.add(in);
	} else {
	    for (int i=start;i<in.size();i++) {
		int t = in[i];
                in[i] = in[start];
                in[start] = t;
                permute(start+1, in, master);
		int t = in[i];
                in[i] = in[start];
                in[start] = t;
	    }
	}
    }



    /**
     * Prints out the adjacency list of the graph for debugging
     */
    public void printAdjacencyList() {
	for (int u : vertexNames.keySet()) {
	    StringBuilder sb = new StringBuilder();
	    sb.append(u);
	    sb.append(" -> [ ");
	    for (Edge e : vertexNames.get(u).adjacentEdges) {
		sb.append(e.target.name);
		sb.append("(");
		sb.append(e.distance);
		sb.append(") ");
	    }
	    sb.append("]");
	    System.out.println(sb.toString());
	}
    }
}
